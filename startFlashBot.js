// Simple setup script that creates a .env file and deploys contract
const fs = require('fs');
const readline = require('readline');
const { ethers } = require('ethers');
const { exec } = require('child_process');
require('dotenv').config();

// USDC contract address on Base network
const USDC_ADDRESS = '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913';

// Hardcoded contract bytecode
const CONTRACT_BYTECODE = '0x608060405234801561000f575f5ffd5b5060015f819055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663095ea7b373edc817a28e8b93b03976fbd4a3ddbc9f7d176c227fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016100da929190610577565b6020604051808303815f875af11580156100f6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061011a91906105e4565b5073420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff1663095ea7b373628ff693426583d9a7fb391e54366292f509d4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161019e929190610577565b6020604051808303815f875af11580156101ba573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101de91906105e4565b5073420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff1663095ea7b373be6d8f0d05cc4be24d5167a3ef062215be6d18a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610262929190610577565b6020604051808303815f875af115801561027e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102a291906105e4565b5073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663095ea7b373be6d8f0d05cc4be24d5167a3ef062215be6d18a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610326929190610577565b6020604051808303815f875af1158015610342573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036691906105e4565b5061037561037a60201b60201c565b6108d4565b5f600267ffffffffffffffff8111156103965761039561060f565b5b6040519080825280602002602001820160405280156103c45781602001602082028036833780820191505090505b50905073edc817a28e8b93b03976fbd4a3ddbc9f7d176c22815f815181106103ef576103ee61063c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073628ff693426583d9a7fb391e54366292f509d457816001815181106104525761045161063c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073fbb21d0380bee3312b33c4353c8936a0f13ef26c73ffffffffffffffffffffffffffffffffffffffff1663c2998238826040518263ffffffff1660e01b81526004016104d99190610720565b5f604051808303815f875af11580156104f4573d5f5f3e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061051c919061088d565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61054982610520565b9050919050565b6105598161053f565b82525050565b5f819050919050565b6105718161055f565b82525050565b5f60408201905061058a5f830185610550565b6105976020830184610568565b9392505050565b5f604051905090565b5f5ffd5b5f5ffd5b5f8115159050919050565b6105c3816105af565b81146105cd575f5ffd5b50565b5f815190506105de816105ba565b92915050565b5f602082840312156105f9576105f86105a7565b5b5f610606848285016105d0565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61069b8161053f565b82525050565b5f6106ac8383610692565b60208301905092915050565b5f602082019050919050565b5f6106ce82610669565b6106d88185610673565b93506106e383610683565b805f5b838110156107135781516106fa88826106a1565b9750610705836106b8565b9250506001810190506106e6565b5085935050505092915050565b5f6020820190508181035f83015261073881846106c4565b905092915050565b5f5ffd5b5f601f19601f8301169050919050565b61075d82610744565b810181811067ffffffffffffffff8211171561077c5761077b61060f565b5b80604052505050565b5f61078e61059e565b905061079a8282610754565b919050565b5f67ffffffffffffffff8211156107b9576107b861060f565b5b602082029050602081019050919050565b5f5ffd5b6107d78161055f565b81146107e1575f5ffd5b50565b5f815190506107f2816107ce565b92915050565b5f61080a6108058461079f565b610785565b9050808382526020820190506020840283018581111561082d5761082c6107ca565b5b835b81811015610856578061084288826107e4565b84526020840193505060208101905061082f565b5050509392505050565b5f82601f83011261087457610873610740565b5b81516108848482602086016107f8565b91505092915050565b5f602082840312156108a2576108a16105a7565b5b5f82015167ffffffffffffffff8111156108bf576108be6105ab565b5b6108cb84828501610860565b91505092915050565b613a8c806108e15f395ff3fe608060405260043610610101575f3560e01c806389a30271116100945780639da3cb0a116100635780639da3cb0a14610398578063ad5c4648146103c2578063f04f2707146103ec578063f6c5c80d14610414578063f89ec5f51461042a57610174565b806389a30271146103045780638da5cb5b1461032e57806396f50b2d146103585780639788f6321461038257610174565b806354957e36116100d057806354957e36146102725780635f82c67e1461029c578063744b66d6146102c6578063853828b6146102ee57610174565b806304c3fc5e146101e257806324f825261461020a57806332fe7b261461022057806346a338971461024a57610174565b366101745773420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0476040518263ffffffff1660e01b81526004015f604051808303818588803b158015610160575f5ffd5b505af1158015610172573d5f5f3e3d5ffd5b005b73420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0476040518263ffffffff1660e01b81526004015f604051808303818588803b1580156101ce575f5ffd5b505af11580156101e0573d5f5f3e3d5ffd5b005b3480156101ed575f5ffd5b50610208600480360381019061020391906128b9565b610454565b005b348015610215575f5ffd5b5061021e610550565b005b34801561022b575f5ffd5b506102346108ae565b6040516102419190612925565b60405180910390f35b348015610255575f5ffd5b50610270600480360381019061026b9190612971565b6108c6565b005b34801561027d575f5ffd5b50610286610ab5565b60405161029391906129de565b60405180910390f35b3480156102a7575f5ffd5b506102b0610abb565b6040516102bd9190612925565b60405180910390f35b3480156102d1575f5ffd5b506102ec60048036038101906102e79190612971565b610ad3565b005b3480156102f9575f5ffd5b50610302610ca2565b005b34801561030f575f5ffd5b50610318611223565b6040516103259190612925565b60405180910390f35b348015610339575f5ffd5b5061034261123b565b60405161034f9190612925565b60405180910390f35b348015610363575f5ffd5b5061036c611260565b6040516103799190612925565b60405180910390f35b34801561038d575f5ffd5b50610396611278565b005b3480156103a3575f5ffd5b506103ac611608565b6040516103b99190612925565b60405180910390f35b3480156103cd575f5ffd5b506103d6611620565b6040516103e39190612925565b60405180910390f35b3480156103f7575f5ffd5b50610412600480360381019061040d9190612caf565b611638565b005b34801561041f575f5ffd5b506104286117da565b005b348015610435575f5ffd5b5061043e611c19565b60405161044b9190612925565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104da90612ddd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16828260405161050a929190612e29565b5f604051808303815f865af19150503d805f8114610543576040519150601f19603f3d011682016040523d82523d5f602084013e610548565b606091505b505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105ea575073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6105f2575f5ffd5b5f73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff166395dd9193306040518263ffffffff1660e01b81526004016106409190612925565b602060405180830381865afa15801561065b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061067f9190612e55565b90505f81116106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90612eca565b60405180910390fd5b5f600167ffffffffffffffff8111156106df576106de612a07565b5b60405190808252806020026020018201604052801561070d5781602001602082028036833780820191505090505b50905073833589fcd6edb6e08f4c7c32d4f71b54bda02913815f8151811061073857610737612ee8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f600167ffffffffffffffff81111561078e5761078d612a07565b5b6040519080825280602002602001820160405280156107bc5781602001602082028036833780820191505090505b50905082815f815181106107d3576107d2612ee8565b5b6020026020010181815250505f60405180604001604052806001808111156107fe576107fd612f15565b5b8152602001858152506040516020016108179190612fc4565b604051602081830303815290604052905073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff16635c38449e308585856040518563ffffffff1660e01b815260040161087b949392919061319c565b5f604051808303815f87803b158015610892575f5ffd5b505af11580156108a4573d5f5f3e3d5ffd5b5050505050505050565b73be6d8f0d05cc4be24d5167a3ef062215be6d18a581565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610960575073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610968575f5ffd5b5f6040518061010001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001606460020b81526020013073ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018381526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81526020015f73ffffffffffffffffffffffffffffffffffffffff16815250905073be6d8f0d05cc4be24d5167a3ef062215be6d18a573ffffffffffffffffffffffffffffffffffffffff1663c714e838826040518263ffffffff1660e01b8152600401610a6e91906132be565b6020604051808303815f875af1158015610a8a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aae9190612e55565b5050505050565b6101f481565b73fbb21d0380bee3312b33c4353c8936a0f13ef26c81565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b6d575073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b75575f5ffd5b5f6040518061010001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001606460020b81526020013073ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018381526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff16815250905073be6d8f0d05cc4be24d5167a3ef062215be6d18a573ffffffffffffffffffffffffffffffffffffffff1663a026383e826040518263ffffffff1660e01b8152600401610c5b9190613378565b6020604051808303815f875af1158015610c77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9b9190612e55565b5050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890612ddd565b60405180910390fd5b73420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dd09190612925565b602060405180830381865afa158015610deb573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e0f9190612e55565b6040518363ffffffff1660e01b8152600401610e2c9291906133a1565b6020604051808303815f875af1158015610e48573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e6c91906133fd565b5073628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f0c9190612925565b602060405180830381865afa158015610f27573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4b9190612e55565b6040518363ffffffff1660e01b8152600401610f689291906133a1565b6020604051808303815f875af1158015610f84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa891906133fd565b5073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110489190612925565b602060405180830381865afa158015611063573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110879190612e55565b6040518363ffffffff1660e01b81526004016110a49291906133a1565b6020604051808303815f875af11580156110c0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110e491906133fd565b5073edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111849190612925565b602060405180830381865afa15801561119f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c39190612e55565b6040518363ffffffff1660e01b81526004016111e09291906133a1565b6020604051808303815f875af11580156111fc573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061122091906133fd565b50565b73833589fcd6edb6e08f4c7c32d4f71b54bda0291381565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73ba12222222228d8ba445958a75a0704d566bf2c881565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611312575073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61131a575f5ffd5b5f73833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff166370a0823160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016113899190612925565b602060405180830381865afa1580156113a4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c89190612e55565b90505f811161140c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140390613472565b60405180910390fd5b5f60038261141a91906134bd565b90505f600167ffffffffffffffff81111561143857611437612a07565b5b6040519080825280602002602001820160405280156114665781602001602082028036833780820191505090505b50905073833589fcd6edb6e08f4c7c32d4f71b54bda02913815f8151811061149157611490612ee8565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f600167ffffffffffffffff8111156114e7576114e6612a07565b5b6040519080825280602002602001820160405280156115155781602001602082028036833780820191505090505b50905082815f8151811061152c5761152b612ee8565b5b6020026020010181815250505f60405180604001604052805f600181111561155757611556612f15565b5b8152602001858152506040516020016115709190612fc4565b604051602081830303815290604052905073ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff16635c38449e308585856040518563ffffffff1660e01b81526004016115d4949392919061319c565b5f604051808303815f87803b1580156115eb575f5ffd5b505af11580156115fd573d5f5f3e3d5ffd5b505050505050505050565b73628ff693426583d9a7fb391e54366292f509d45781565b73420000000000000000000000000000000000000681565b611640611c31565b73ba12222222228d8ba445958a75a0704d566bf2c873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b990613548565b60405180910390fd5b5f818060200190518101906116d791906135da565b90505f60018111156116ec576116eb612f15565b5b815f0151600181111561170257611701612f15565b5b036117345761172f8160200151845f8151811061172257611721612ee8565b5b6020026020010151611c7e565b6117cb565b60018081111561174757611746612f15565b5b815f0151600181111561175d5761175c612f15565b5b0361178f5761178a8160200151845f8151811061177d5761177c612ee8565b5b602002602001015161229a565b6117ca565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c19061364f565b60405180910390fd5b5b506117d46127e4565b50505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186090612ddd565b60405180910390fd5b73628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff16630e7527027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518263ffffffff1660e01b81526004016118d6919061366d565b6020604051808303815f875af192505050801561191157506040513d601f19601f8201168201806040525081019061190e9190612e55565b60015b1561191857505b73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff16630e7527027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518263ffffffff1660e01b8152600401611985919061366d565b6020604051808303815f875af19250505080156119c057506040513d601f19601f820116820180604052508101906119bd9190612e55565b60015b156119c757505b5f73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a159190612925565b602060405180830381865afa158015611a30573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a549190612e55565b90505f811115611aee5773edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff1663db006a75826040518263ffffffff1660e01b8152600401611aab919061366d565b6020604051808303815f875af1925050508015611ae657506040513d601f19601f82011682018060405250810190611ae39190612e55565b60015b15611aed57505b5b5f73628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b3c9190612925565b602060405180830381865afa158015611b57573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612e55565b90505f811115611c155773628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff1663db006a75826040518263ffffffff1660e01b8152600401611bd2919061366d565b6020604051808303815f875af1925050508015611c0d57506040513d601f19601f82011682018060405250810190611c0a9190612e55565b60015b15611c1457505b5b5050565b73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2281565b60025f5403611c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6c906136d0565b60405180910390fd5b60025f81905550565b5f73833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ccc9190612925565b602060405180830381865afa158015611ce7573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d0b9190612e55565b9050611d5a73833589fcd6edb6e08f4c7c32d4f71b54bda0291373420000000000000000000000000000000000000661271061270f85611d4b91906134bd565b611d55919061371b565b610ad3565b5f73833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff166370a0823160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611dc99190612925565b602060405180830381865afa158015611de4573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e089190612e55565b905073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff166323b872dd60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630846040518463ffffffff1660e01b8152600401611e7c9392919061374b565b5f604051808303815f87803b158015611e93575f5ffd5b505af1158015611ea5573d5f5f3e3d5ffd5b505050505f81905073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8836040518363ffffffff1660e01b8152600401611f109291906133a1565b6020604051808303815f875af1158015611f2c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f5091906133fd565b505f73420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f9f9190612925565b602060405180830381865afa158015611fba573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fde9190612e55565b90505f8111612022576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612019906137ca565b60405180910390fd5b5f73628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff1663a0712d6861271061270f8561206491906134bd565b61206e919061371b565b6040518263ffffffff1660e01b815260040161208a919061366d565b6020604051808303815f875af11580156120a6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120ca9190612e55565b1461210a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210190613832565b60405180910390fd5b5f73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec84876121479190613850565b6040518263ffffffff1660e01b8152600401612163919061366d565b6020604051808303815f875af115801561217f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121a39190612e55565b146121e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121da906138cd565b60405180910390fd5b73833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c884876122349190613850565b6040518363ffffffff1660e01b81526004016122519291906133a1565b6020604051808303815f875af115801561226d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061229191906133fd565b50505050505050565b5f73edc817a28e8b93b03976fbd4a3ddbc9f7d176c2273ffffffffffffffffffffffffffffffffffffffff16630e7527027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518263ffffffff1660e01b8152600401612308919061366d565b6020604051808303815f875af1158015612324573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123489190612e55565b14612388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237f90613935565b60405180910390fd5b5f73628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016123d69190612925565b602060405180830381865afa1580156123f1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124159190612e55565b90505f8111612459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124509061399d565b60405180910390fd5b5f73628ff693426583d9a7fb391e54366292f509d45773ffffffffffffffffffffffffffffffffffffffff1663db006a75836040518263ffffffff1660e01b81526004016124a7919061366d565b6020604051808303815f875af11580156124c3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124e79190612e55565b14612527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251e90613a05565b60405180910390fd5b5f82846125349190613a23565b90505f73420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125849190612925565b602060405180830381865afa15801561259f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125c39190612e55565b90506125f873420000000000000000000000000000000000000673833589fcd6edb6e08f4c7c32d4f71b54bda0291383610ad3565b5f73420000000000000000000000000000000000000673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016126469190612925565b602060405180830381865afa158015612661573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126859190612e55565b905073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8856040518363ffffffff1660e01b81526004016126ea9291906133a1565b6020604051808303815f875af1158015612706573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061272a91906133fd565b5073833589fcd6edb6e08f4c7c32d4f71b54bda0291373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161279b9291906133a1565b6020604051808303815f875af11580156127b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127db91906133fd565b50505050505050565b60015f81905550565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612827826127fe565b9050919050565b6128378161281d565b8114612841575f5ffd5b50565b5f813590506128528161282e565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261287957612878612858565b5b8235905067ffffffffffffffff8111156128965761289561285c565b5b6020830191508360018202830111156128b2576128b1612860565b5b9250929050565b5f5f5f604084860312156128d0576128cf6127f6565b5b5f6128dd86828701612844565b935050602084013567ffffffffffffffff8111156128fe576128fd6127fa565b5b61290a86828701612864565b92509250509250925092565b61291f8161281d565b82525050565b5f6020820190506129385f830184612916565b92915050565b5f819050919050565b6129508161293e565b811461295a575f5ffd5b50565b5f8135905061296b81612947565b92915050565b5f5f5f60608486031215612988576129876127f6565b5b5f61299586828701612844565b93505060206129a686828701612844565b92505060406129b78682870161295d565b9150509250925092565b5f62ffffff82169050919050565b6129d8816129c1565b82525050565b5f6020820190506129f15f8301846129cf565b92915050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612a3d826129f7565b810181811067ffffffffffffffff82111715612a5c57612a5b612a07565b5b80604052505050565b5f612a6e6127ed565b9050612a7a8282612a34565b919050565b5f67ffffffffffffffff821115612a9957612a98612a07565b5b602082029050602081019050919050565b5f612abc612ab784612a7f565b612a65565b90508083825260208201905060208402830185811115612adf57612ade612860565b5b835b81811015612b085780612af48882612844565b845260208401935050602081019050612ae1565b5050509392505050565b5f82601f830112612b2657612b25612858565b5b8135612b36848260208601612aaa565b91505092915050565b5f67ffffffffffffffff821115612b5957612b58612a07565b5b602082029050602081019050919050565b5f612b7c612b7784612b3f565b612a65565b90508083825260208201905060208402830185811115612b9f57612b9e612860565b5b835b81811015612bc85780612bb4888261295d565b845260208401935050602081019050612ba1565b5050509392505050565b5f82601f830112612be657612be5612858565b5b8135612bf6848260208601612b6a565b91505092915050565b5f5ffd5b5f67ffffffffffffffff821115612c1d57612c1c612a07565b5b612c26826129f7565b9050602081019050919050565b828183375f83830152505050565b5f612c53612c4e84612c03565b612a65565b905082815260208101848484011115612c6f57612c6e612bff565b5b612c7a848285612c33565b509392505050565b5f82601f830112612c9657612c95612858565b5b8135612ca6848260208601612c41565b91505092915050565b5f5f5f5f60808587031215612cc757612cc66127f6565b5b5f85013567ffffffffffffffff811115612ce457612ce36127fa565b5b612cf087828801612b12565b945050602085013567ffffffffffffffff811115612d1157612d106127fa565b5b612d1d87828801612bd2565b935050604085013567ffffffffffffffff811115612d3e57612d3d6127fa565b5b612d4a87828801612bd2565b925050606085013567ffffffffffffffff811115612d6b57612d6a6127fa565b5b612d7787828801612c82565b91505092959194509250565b5f82825260208201905092915050565b7f4e6f74206f776e657200000000000000000000000000000000000000000000005f82015250565b5f612dc7600983612d83565b9150612dd282612d93565b602082019050919050565b5f6020820190508181035f830152612df481612dbb565b9050919050565b5f81905092915050565b5f612e108385612dfb565b9350612e1d838584612c33565b82840190509392505050565b5f612e35828486612e05565b91508190509392505050565b5f81519050612e4f81612947565b92915050565b5f60208284031215612e6a57612e696127f6565b5b5f612e7784828501612e41565b91505092915050565b7f4e6f206465627420746f20636c6f7365000000000000000000000000000000005f82015250565b5f612eb4601083612d83565b9150612ebf82612e80565b602082019050919050565b5f6020820190508181035f830152612ee181612ea8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60028110612f5357612f52612f15565b5b50565b5f819050612f6382612f42565b919050565b5f612f7282612f56565b9050919050565b612f8281612f68565b82525050565b612f918161293e565b82525050565b604082015f820151612fab5f850182612f79565b506020820151612fbe6020850182612f88565b50505050565b5f604082019050612fd75f830184612f97565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61300f8161281d565b82525050565b5f6130208383613006565b60208301905092915050565b5f602082019050919050565b5f61304282612fdd565b61304c8185612fe7565b935061305783612ff7565b805f5b8381101561308757815161306e8882613015565b97506130798361302c565b92505060018101905061305a565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6130c88383612f88565b60208301905092915050565b5f602082019050919050565b5f6130ea82613094565b6130f4818561309e565b93506130ff836130ae565b805f5b8381101561312f57815161311688826130bd565b9750613121836130d4565b925050600181019050613102565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61316e8261313c565b6131788185613146565b9350613188818560208601613156565b613191816129f7565b840191505092915050565b5f6080820190506131af5f830187612916565b81810360208301526131c18186613038565b905081810360408301526131d581856130e0565b905081810360608301526131e98184613164565b905095945050505050565b5f8160020b9050919050565b613209816131f4565b82525050565b613218816127fe565b82525050565b61010082015f8201516132335f850182613006565b5060208201516132466020850182613006565b5060408201516132596040850182613200565b50606082015161326c6060850182613006565b50608082015161327f6080850182612f88565b5060a082015161329260a0850182612f88565b5060c08201516132a560c0850182612f88565b5060e08201516132b860e085018261320f565b50505050565b5f610100820190506132d25f83018461321e565b92915050565b61010082015f8201516132ed5f850182613006565b5060208201516133006020850182613006565b5060408201516133136040850182613200565b5060608201516133266060850182613006565b5060808201516133396080850182612f88565b5060a082015161334c60a0850182612f88565b5060c082015161335f60c0850182612f88565b5060e082015161337260e085018261320f565b50505050565b5f6101008201905061338c5f8301846132d8565b92915050565b61339b8161293e565b82525050565b5f6040820190506133b45f830185612916565b6133c16020830184613392565b9392505050565b5f8115159050919050565b6133dc816133c8565b81146133e6575f5ffd5b50565b5f815190506133f7816133d3565b92915050565b5f60208284031215613412576134116127f6565b5b5f61341f848285016133e9565b91505092915050565b7f4f776e6572206d7573742068617665205553444320746f20737570706c7900005f82015250565b5f61345c601e83612d83565b915061346782613428565b602082019050919050565b5f6020820190508181035f83015261348981613450565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6134c78261293e565b91506134d28361293e565b92508282026134e08161293e565b915082820484148315176134f7576134f6613490565b5b5092915050565b7f43616c6c6572206973206e6f742042616c616e636572205661756c74000000005f82015250565b5f613532601c83612d83565b915061353d826134fe565b602082019050919050565b5f6020820190508181035f83015261355f81613526565b9050919050565b5f5ffd5b60028110613576575f5ffd5b50565b5f815190506135878161356a565b92915050565b5f604082840312156135a2576135a1613566565b5b6135ac6040612a65565b90505f6135bb84828501613579565b5f8301525060206135ce84828501612e41565b60208301525092915050565b5f604082840312156135ef576135ee6127f6565b5b5f6135fc8482850161358d565b91505092915050565b7f496e76616c6964206c6f616e20616374696f6e000000000000000000000000005f82015250565b5f613639601383612d83565b915061364482613605565b602082019050919050565b5f6020820190508181035f8301526136668161362d565b9050919050565b5f6020820190506136805f830184613392565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f6136ba601f83612d83565b91506136c582613686565b602082019050919050565b5f6020820190508181035f8301526136e7816136ae565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6137258261293e565b91506137308361293e565b9250826137405761373f6136ee565b5b828204905092915050565b5f60608201905061375e5f830186612916565b61376b6020830185612916565b6137786040830184613392565b949350505050565b7f53776170207969656c646564206e6f20574554480000000000000000000000005f82015250565b5f6137b4601483612d83565b91506137bf82613780565b602082019050919050565b5f6020820190508181035f8301526137e1816137a8565b9050919050565b7f6d57455448206d696e74206661696c65640000000000000000000000000000005f82015250565b5f61381c601183612d83565b9150613827826137e8565b602082019050919050565b5f6020820190508181035f83015261384981613810565b9050919050565b5f61385a8261293e565b91506138658361293e565b925082820390508181111561387d5761387c613490565b5b92915050565b7f6d5553444320626f72726f77206661696c6564000000000000000000000000005f82015250565b5f6138b7601383612d83565b91506138c282613883565b602082019050919050565b5f6020820190508181035f8301526138e4816138ab565b9050919050565b7f6d55534443207265706179206661696c656400000000000000000000000000005f82015250565b5f61391f601283612d83565b915061392a826138eb565b602082019050919050565b5f6020820190508181035f83015261394c81613913565b9050919050565b7f4e6f206d5745544820746f2072656465656d00000000000000000000000000005f82015250565b5f613987601283612d83565b915061399282613953565b602082019050919050565b5f6020820190508181035f8301526139b48161397b565b9050919050565b7f6d574554482072656465656d206661696c6564000000000000000000000000005f82015250565b5f6139ef601383612d83565b91506139fa826139bb565b602082019050919050565b5f6020820190508181035f830152613a1c816139e3565b9050919050565b5f613a2d8261293e565b9150613a388361293e565b9250828201905080821115613a5057613a4f613490565b5b9291505056fea26469706673582212206507ad2fe045193204a86b73a3e2830a1235d765d5b78b1225ddf811f2c7c6a364736f6c634300081e0033';

// Minimal ERC20 ABI for transfer function
const ERC20_ABI = [
  "function transfer(address to, uint256 amount) returns (bool)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function balanceOf(address owner) view returns (uint256)",
  "function decimals() view returns (uint8)"
];

// Bot contract ABI (just the withdraw function needed)
const BOT_CONTRACT_ABI = [
  "function withdrawAll() external"
];

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Function to get user input
function question(query) {
  return new Promise(resolve => {
    rl.question(query, resolve);
  });
}

// Function to run mainTG.js script
function runMainScript() {
  console.log("\nStarting the bot...");
  const botProcess = exec('node mainTG.js');
  botProcess.stdout.pipe(process.stdout);
  botProcess.stderr.pipe(process.stderr);
}

// Function to display main menu and handle option selection
async function displayMainMenu() {
  console.log("");
  console.log("====================");
  console.log("Please select the appropriate option for your current session");
  console.log("1. Start a fresh bot, deploy a new contract, and fund the contract.");
  console.log("2. Continue operating a previously deployed bot.");
  console.log("3. Withdraw all funds from the bot contract and deposit them into your personal wallet.");
  console.log("4. Clean Up (Repay all debt and redeem all collateral).");
  console.log("5. ATTENTION - FIRST TIME USERS SELECT THIS OPTION");
  
  const option = await question("Enter your choice (1-5): ");
  
  switch(option) {
    case '1':
      await setup();
      break;
    case '2':
      if (!fs.existsSync('.env')) {
        console.log("No .env file found. Please set up the bot first using option 1.");
        rl.close();
        return;
      }
      
      console.log("Loading existing bot configuration...");
      runMainScript();
      rl.close();
      break;
    case '3':
      await withdrawAll();
      break;
    case '4':
      await cleanUpContract();
      break;
    case '5':
      await showFirstTimeUserInfo();
      break;
    default:
      console.log("Invalid option. Please select a number between 1 and 5.");
      await displayMainMenu();
      break;
  }
}

// Function to withdraw all tokens from contract
// Simplified withdrawAll function
// Improved withdrawAll function with debugging
async function withdrawAll() {
  try {
    // Make sure we have dotenv loaded
    require('dotenv').config();
    
    // Debug: check if environment variables are loaded
    console.log("Checking environment variables...");
    if (!process.env.RPC_URL) {
      throw new Error("RPC_URL is missing in .env file");
    }
    if (!process.env.PRIVATE_KEY) {
      throw new Error("PRIVATE_KEY is missing in .env file");
    }
    if (!process.env.CONTRACT_ADDRESS) {
      throw new Error("CONTRACT_ADDRESS is missing in .env file");
    }
    
    console.log("Connecting to network...");
    console.log(`RPC URL: ${process.env.RPC_URL}`);
    console.log(`Contract Address: ${process.env.CONTRACT_ADDRESS}`);
    
    // Use ethers v5 syntax explicitly
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    
    // Check provider
    const network = await provider.getNetwork();
    console.log(`Connected to network: ${network.name} (chainId: ${network.chainId})`);
    
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    console.log(`Wallet address: ${wallet.address}`);
    
    // Check wallet ETH balance to ensure connection is working
    const ethBalance = await provider.getBalance(wallet.address);
    console.log(`Wallet ETH balance: ${ethers.utils.formatEther(ethBalance)} ETH`);
    
    // Check if there's an open position that needs to be closed
    let positionState = { type: 'none' };
    if (fs.existsSync('position.json')) {
      try {
        positionState = JSON.parse(fs.readFileSync('position.json', 'utf8'));
        console.log('Found position state:', positionState);
      } catch (error) {
        console.log('Error reading position.json:', error.message);
      }
    }
    
    // Create contract instance with all needed functions
    const contract = new ethers.Contract(
      process.env.CONTRACT_ADDRESS,
      [
        "function withdrawAll() external",
        "function closeLong() external",
        "function closeShort() external"
      ],
      wallet
    );
    
    // Close any open position before withdrawing
    if (positionState.type === 'long' || positionState.type === 'short') {
      console.log(`Closing ${positionState.type.toUpperCase()} position before withdrawal...`);
      
      const gasPrice = await provider.getGasPrice();
      const gasLimit = ethers.BigNumber.from("3000000");
      
      try {
        const closeFn = `close${positionState.type.charAt(0).toUpperCase() + positionState.type.slice(1)}`;
        const closeTx = await contract[closeFn]({
          gasLimit: gasLimit,
          gasPrice: gasPrice
        });
        
        console.log(`Close position transaction: ${closeTx.hash}`);
        await closeTx.wait();
        console.log('Position closed successfully');
        
        // Clear the position.json file
        if (fs.existsSync('position.json')) {
          fs.unlinkSync('position.json');
          console.log('Position file cleared');
        }
      } catch (error) {
        console.log('Error closing position:', error.message);
        console.log('Proceeding with withdrawal anyway...');
      }
    }
    
    // Get gas price manually and ensure it's a BigNumber
    const gasPrice = await provider.getGasPrice();
    console.log(`Current gas price: ${ethers.utils.formatUnits(gasPrice, 'gwei')} gwei`);
    
    // Use hardcoded gas limit
    const gasLimit = ethers.BigNumber.from("800000");
    console.log(`Using gas limit: ${gasLimit.toString()}`);
    
    console.log("Preparing withdrawal transaction...");
    
    // Create transaction with explicit parameters
    const tx = await contract.withdrawAll({
      gasLimit: gasLimit,
      gasPrice: gasPrice
    });
    
    console.log(`Withdrawal transaction submitted: ${tx.hash}`);
    console.log("Waiting for confirmation...");
    
    const receipt = await tx.wait();
    console.log(`\nWithdrawal complete!`);
    console.log(`Transaction hash: ${receipt.transactionHash}`);
    
  } catch (error) {
    console.error("Error during withdrawal:");
    console.error(error.message);
    
    // More detailed debugging for ethers.js errors
    if (error.code) {
      console.error(`Error code: ${error.code}`);
    }
    if (error.reason) {
      console.error(`Error reason: ${error.reason}`);
    }
    if (error.data) {
      console.error(`Error data: ${error.data}`);
    }
    if (error.transaction) {
      console.error("Transaction that caused the error:");
      console.error(JSON.stringify(error.transaction, null, 2));
    }
  } finally {
    rl.close();
  }
}

// Function to call the cleanUp function on the contract
async function cleanUpContract() {
  try {
    require('dotenv').config();
    
    console.log("Checking environment variables...");
    if (!process.env.RPC_URL || !process.env.PRIVATE_KEY || !process.env.CONTRACT_ADDRESS) {
      throw new Error("RPC_URL, PRIVATE_KEY, or CONTRACT_ADDRESS is missing in .env file. Please run setup first.");
    }
    
    console.log("Connecting to network to perform cleanup...");
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    
    const contract = new ethers.Contract(
      process.env.CONTRACT_ADDRESS,
      [ "function cleanUp() external" ], // ABI for just the cleanUp function
      wallet
    );
    
    const gasPrice = await provider.getGasPrice();
    const gasLimit = ethers.BigNumber.from("3000000"); // Generous gas limit for cleanup
    
    console.log("Sending first clean up transaction...");
    const tx1 = await contract.cleanUp({
      gasLimit: gasLimit,
      gasPrice: gasPrice
    });
    
    console.log(`First clean up transaction submitted: ${tx1.hash}`);
    console.log("Waiting for confirmation...");
    
    const receipt1 = await tx1.wait();
    console.log(`\nFirst cleanup complete! Transaction hash: ${receipt1.transactionHash}`);

    console.log("\nSending second clean up transaction...");
    const tx2 = await contract.cleanUp({
        gasLimit: gasLimit,
        gasPrice: await provider.getGasPrice() // Fetch latest gas price
    });

    console.log(`Second clean up transaction submitted: ${tx2.hash}`);
    console.log("Waiting for confirmation...");

    const receipt2 = await tx2.wait();
    console.log(`\nSecond cleanup complete! Transaction hash: ${receipt2.transactionHash}`);

  } catch (error) {
    console.error("Error during contract cleanup:");
    console.error(error.message);
  } finally {
    rl.close();
  }
}

// Function to show first-time user information
async function showFirstTimeUserInfo() {
  console.log("");
  console.log("====================");
  console.log("This is a bot, a javascript file that when executed will perform buying and selling wrapped ethereum, WETH. There are two parts to this bot - the main.js script, and the smart contract deployed to the Ethereum Layer 2 Network, Coinbase Base. The script will communicate to the smart contract, and the smart contract is the code that will be performing the actions on the blockchain. ");
  console.log("");
  console.log("The strategy I've decided on is a modified DCA strategy. Dollar Cost Average strategies are simple - you buy an asset at a chosen time interval regardless of current asset price, trends, market sentiment, etc...");
  console.log("");
  console.log("There are 20 \"slots\". Each slot can be thought of as an individual trader, buying and selling WETH. When a \"buy\" transaction occurs, certain data is stored in one of the slots. The price the asset was bought at is one of values stored. The \"buy\" transactions occur on a time interval in parallel to the \"profitability check and sell\" actions. As the bot buys WETH over time the slots will fill up with Active prices. Parallel to this process, another process is running that is constantly checking to see if any of the slots are in profit. If one of them can be sold at a profit, a \"sell\" transaction occurs. So you can think of the script as a coordinator and data manager, and the smart contract as 20 individual traders who buy low, and sell high.");
  console.log("");
  console.log("The bot will not execute a trade that isn't profitable. There is a minimum profit threshold that is required to sell a slot thats been determined by the liquidity pool's swap fee and extensive testing. However, you will see some failed transactions occuring. These are rare, and they occur when a trade is attempted that will end up losing money for a variety of reasons, so in those instances I've chosen to simply kill the transaction and hold the slot position until the profitability threshold is further surpassed for that position.");
  console.log("");
  console.log("In extended downward trends, and even daily smaller downtrends, the bot will eventually accumulate positions that were bought too high that will take considerable time to eventually sell as the price of WETH comes up. The bot *will* be extremely profitable *only* if its turning over slots. We want a high quantity of trades, not long term holding positions. If the bot is just holding onto bought WETH for extended periods of time, its not making money. If certain conditions are met that detect this situation, the bot will simply sell all 20 slots for a small loss. This loss of profit is an acceptable, tested, and while its more than negligible the overall profit generated far exceeds these rare losses and this operation is done to allow the bot to maintain a steady buy and sell pattern without being hung up by underwater positions.");
  console.log("");
  console.log("I've intentionally designed this bot to give the user no options to choose from and no variables to adjust. Advanced users may modify the code at their own risk. I've found optimal parameters that work in all market conditions, and have proven to be profitable even in extended downtrends. ");
  console.log("");
  console.log("Lastly, this is an advanced trading bot interacting with the Ethereum Network. I've created this for extremely strict security access - only you can interact with the script by starting or stopping it, creating a new bot completely fresh, or withdrawing the assets from the smart contract back into your wallet. And only the script can communicate with the smart contract. No third party can manipulate or disrupt operations, and the potential for user error has been completely removed from the entire process.");
  console.log("");
  console.log(" By default, every \"sell\" transaction will be profitable and 80% of that profit is sent directly to your personal wallet. The other 20% is kept within the smart contract due to the bot requiring the funds to operate freely within a volatile market. If the bot doesnt have the funds to buy because Ethereum price has risen sharply, the bot is dead in the water. The 20% ensures the bot can operate 24/7 unrestricted. This amount, along with any other value in the smart contract can be withdrawn at any time by selecting the appropriate option from the main menu.");
  console.log("");
  console.log("Finally, this is an investment that on paper and in practive has proven over and over to create substantial returns. That doesnt mean its 100% bullet proof. Nothing is. If you put your own money into the bot for it to transact on your behalf, then you assume all risk. Giant meteors, internet outages, natural disasters, there are many things that will stop this bot from working but as long as you've got internet, the bot has been designed to basically make you money while you do nothing. Every measure has been taken to prevent losses. I personally run this bot as it is, same settings, the same code, and I put my own money into it with extreme confidence and walk away from it for days at a time. ");
  console.log("");
  console.log("User error outside of operating the bot correctly is your fault. Use safe crypto general practices, and think before you do something. Double check stuff. ");
  console.log("");
  console.log("Otherwise feel free to contact me if you run into problems or want a feature implemented or have an idea to increase performance.");
  console.log("");
  
  await question("Press any key to return to the main menu...");
  await displayMainMenu();
}

// Main setup function
async function setup() {
  console.log("");
  console.log("====================");
  console.log("BOT SETUP");
  console.log("====================");
  
  try {
    // Check if .env already exists
    if (fs.existsSync('.env')) {
      const overwrite = await question(".env file already exists. Overwrite? (y/n): ");
      if (overwrite.toLowerCase() !== 'y') {
        console.log("Setup cancelled.");
        rl.close();
        return;
      }
    }
    
    // Get inputs from user
    const privateKey = await question("Enter your private key: ");
    const rpcUrl = await question("Enter Base RPC URL: ");
    const telegramToken = await question("Enter your Telegram bot token: ");
    const telegramChatId = await question("Enter your Telegram chat ID: ");
    
    // Try to connect to network
    console.log("Connecting to network...");
    const provider = new ethers.providers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);
    const walletAddress = wallet.address;
    
    // Get wallet balance
    const balance = await provider.getBalance(walletAddress);
    const etherBalance = ethers.utils.formatEther(balance);
    console.log(`Connected successfully. Wallet: ${walletAddress}`);
    console.log(`Balance: ${etherBalance} ETH`);
    
    // Create USDC contract instance to check balance
    const usdcContract = new ethers.Contract(USDC_ADDRESS, ERC20_ABI, wallet);
    const usdcBalance = await usdcContract.balanceOf(walletAddress);
    const usdcDecimals = await usdcContract.decimals();
    const usdcBalanceFormatted = ethers.utils.formatUnits(usdcBalance, usdcDecimals);
    console.log(`USDC Balance: ${usdcBalanceFormatted}`);
    
    // Ask if user wants to deploy contract
    const shouldDeploy = await question("Deploy contract now? (y/n): ");

    let contractAddress = '';
    
    if (shouldDeploy.toLowerCase() === 'y') {
      console.log("Preparing to deploy contract...");
      
      // Using hardcoded bytecode instead of asking for it
      const bytecode = CONTRACT_BYTECODE;
      
      // Deploy contract using direct transaction to address(0)
      const tx = {
        data: bytecode,
        gasPrice: (await provider.getGasPrice()).mul(120).div(100), // 20% buffer
        gasLimit: 5000000
      };
      
      console.log("Deploying contract (this may take a while)...");
      const deployTx = await wallet.sendTransaction(tx);
      console.log(`Contract deployment transaction: ${deployTx.hash}`);
      
      // Wait for transaction to be mined
      const receipt = await deployTx.wait();
      
      // Contract address is determined by sender address and nonce
      contractAddress = ethers.utils.getContractAddress({
        from: wallet.address,
        nonce: deployTx.nonce
      });
      
      console.log(`Contract deployed to: ${contractAddress}`);
    } else {
      contractAddress = await question("Enter your existing contract address: ");
    }
    
    // Ask user to approve contract for USDC spending
    const approveSpending = await question("Do you want to approve the new contract to spend USDC from your wallet? (y/n): ");

    if (approveSpending.toLowerCase() === 'y') {
      console.log(`Approving contract ${contractAddress} to spend your USDC...`);
      
      // Approve for "infinite" amount
      const infiniteAmount = ethers.constants.MaxUint256;
      
      const approveTx = await usdcContract.approve(contractAddress, infiniteAmount);
      console.log(`Approval transaction sent: ${approveTx.hash}`);
      
      await approveTx.wait();
      console.log("Contract successfully approved for USDC spending.");
    } else {
      console.log("Skipping USDC approval. The bot may not function correctly without it.");
    }
    
    // Create .env file
    const envContent = `PRIVATE_KEY=${privateKey}\nRPC_URL=${rpcUrl}\nCONTRACT_ADDRESS=${contractAddress}\nTELEGRAM_TOKEN=${telegramToken}\nTELEGRAM_CHAT_ID=${telegramChatId}`;
    fs.writeFileSync('.env', envContent);
    
    console.log(".env file created successfully!");
    console.log("You can now run the mainTG.js script.");

    // Ask if user wants to start the bot immediately
    const startNow = await question("Start the bot now? (y/n): ");
    if (startNow.toLowerCase() === 'y') {
      runMainScript();
    } else {
      rl.close();
    }
  } catch (error) {
    console.error("Error during setup:", error);
    rl.close();
  }
}

// Start the program by running setup
displayMainMenu();

